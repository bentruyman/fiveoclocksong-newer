#! /usr/bin/env node

var crypto = require('crypto');

var config = require('../config').database,
    nano   = require('nano')(config.url);

function createDatabase(name, callback) {
  nano.db.create(name, function (err) {
    if (err) { throw err; }
    callback();
  });
}

function createDesignDocs(db, callback) {
  var docs = [];
  
  // polls design document
  docs.push({
    _id: '_design/polls',
    language: 'javascript',
    views: {
      byDate: {
        map: function(doc) {
          if (doc.type === 'poll') {
            emit(doc.date, doc);
          }
        }.toString()
      }
    }
  });
  
  // user design document
  docs.push({
    _id: '_design/users',
    language: 'javascript',
    views: {
      achievements: {
        map: function(doc) {
          if (doc.type === 'user' && doc.achievements) {
            for (var i = 0, j = doc.achievements.length; i < j; i++) {
              emit(doc.achievements[i], doc.name);
            }
          }
        }.toString(),
        reduce: function (keys, values) {
          return values.sort();
        }.toString()
      },
      byName: {
        map: function(doc) {
          if (doc.type === 'user') {
            emit(doc.name, doc);
          }
        }.toString()
      }
    }
  });
  
  // votes design document
  docs.push({
    _id: '_design/votes',
    language: 'javascript',
    views: {
      byDate: {
        map: function(doc) {
          if (doc.type === 'vote') {
            emit(doc.pollDate, doc.votes);
          }
        }.toString(),
        reduce: function (keys, values) {
          var totals = {},
              i, j, track;
          
          for (i = 0, j = values.length; i < j; i++) {
            for (track in values[i]) {
              totals[track] = (typeof totals[track] !== 'undefined') ? totals[track] + values[i][track] : values[i][track];
            }
          }
          
          return totals;
        }.toString()
      },
      byDateAndUser: {
        map: function(doc) {
          if (doc.type === 'vote') {
            emit([doc.pollDate, doc.user], doc.votes);
          }
        }.toString()
      }
    }
  });
  
  db.bulk({ docs: docs }, function (err) {
    if (err) { throw err; }
    callback();
  });
}

// check to see if the database exists
nano.db.get(config.name, function (err, resp) {
  // no database exists, create it
  if (err && err.error === 'not_found') {
    console.log('No database exists. Creating one...');
    createDatabase(config.name, function () {
      createDesignDocs(nano.use(config.name), function () {
        console.log('Done!');
      });
    });
  }
  // unhandled error, throw it
  else if (err) {
    if (err.code === 'ECONNREFUSED') {
      console.log('Couldn\'t connect to CouchDB. Ensure couchdb has been started and the database url in config.json is correct.');
    } else {
      throw err;
    }
  }
  // database exists, create design docs
  else {
    createDesignDocs(nano.use(config.name), function () {
      console.log('Done!');
    });
  }
});
